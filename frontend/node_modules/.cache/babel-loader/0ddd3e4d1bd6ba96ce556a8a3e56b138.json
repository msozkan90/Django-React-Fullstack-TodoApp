{"ast":null,"code":"// import logo from './logo.svg';\n// import './App.css';\n// import React, { Component } from 'react'\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoList: [],\n//       activeItem: {\n//         id: null,\n//         title: '',\n//         completed: false,\n//       },\n//       editing: false,\n//       deneme:\"\",\n//     };\n//     this.fetchTasks = this.fetchTasks.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//     this.formSubmit = this.formSubmit.bind(this);\n//     this.startEdit = this.startEdit.bind(this);\n//     this.getCookie = this.getCookie.bind(this);\n//     this.deleteItem = this.deleteItem.bind(this);\n//   };\n//   getCookie(name) {\n//     var cookieValue = null;\n//     if (document.cookie && document.cookie !== '') {\n//       var cookies = document.cookie.split(';');\n//       for (var i = 0; i < cookies.length; i++) {\n//         var cookie = cookies[i].trim();\n//         // Does this cookie string begin with the name we want?\n//         if (cookie.substring(0, name.length + 1) === (name + '=')) {\n//           cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n//           break;\n//         }\n//       }\n//     }\n//     return cookieValue;\n//   }\n//   componentDidMount() {\n//     this.fetchTasks()\n//   }\n//   //  setTimeout(this.fetchTasks, 5000); \n//   // myTimeout = setTimeout(this.fetchTasks, milliseconds);\n//   componentWillMount() {\n//     this.fetchTasks()\n//   }\n//   fetchTasks() {\n//     console.log(\"Fetching...\")\n//     fetch('http://127.0.0.1:8000/todolist')\n//       .then(response => response.json())\n//       .then(data =>\n//         //console.log(data)\n//         this.setState({\n//           todoList: data\n//         })\n//       )\n//   }\n//   formSubmit(e) {\n//     e.preventDefault()\n//     if (this.state.activeItem.title === '') {\n//       console.log(\"Bu alan boş bırakılamaz\")\n//       console.log(this.state.todoList)\n//     }\n//     else {\n//       console.log(\"Submit...\")\n//       let item_id = this.state.activeItem.id\n//       console.log(this.state.editing)\n//       var csrftoken = this.getCookie('csrftoken')\n//       var url = 'http://127.0.0.1:8000/createItem'\n//       if (this.state.editing === true) {\n//         url = `http://127.0.0.1:8000/updateItem/${this.state.activeItem.id}`\n//         this.setState({\n//           editing: false\n//         })\n//       }\n//       fetch(url, {\n//         method: 'POST',\n//         headers: {\n//           'Content-type': 'application/json',\n//           'X-CSRFToken': csrftoken,\n//         },\n//         body: JSON.stringify(this.state.activeItem)\n//       }).then((response) => {\n//         this.fetchTasks()\n//         this.setState({\n//           activeItem: {\n//             id: null,\n//             title: '',\n//             completed: false,\n//           }\n//         })\n//       }).catch(function (error) {\n//         console.log('ERROR:', error)\n//       })\n//     }\n//   }\n//   startEdit(task) {\n//     this.setState({\n//       deneme:task.title,\n//     })\n//     // this.setState({\n//     //   activeItem:{\n//     //     ...task,\n//     //     editing:true\n//     //   }\n//     // })\n//     this.forceUpdate();\n//     //console.log(this.state.activeItem)\n//     console.log(this.state.deneme)\n//   }\n//   deleteItem(task) {\n//     console.log(task.id)\n//     var csrftoken = this.getCookie('csrftoken')\n//     console.log(csrftoken)\n//     fetch(`http://127.0.0.1:8000/deleteItem/${task.id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Content-type': 'application/json',\n//         'X-CSRFToken': csrftoken,\n//       },\n//       body: JSON.stringify(task.id)\n//     }).then((response) => {\n//       console.log(response)\n//       this.fetchTasks()\n//     })\n//   }\n//   handleChange(e) {\n//     var value = e.target.value\n//     if (value === '') {\n//       this.setState(\n//         {\n//           activeItem: {\n//             title: value\n//           }\n//         }\n//       )\n//       console.log(\"Bu alan boş bırakılamaz\")\n//     }\n//     else {\n//       console.log('Value:', value)\n//       this.setState(\n//         {\n//           activeItem: {\n//             title: value\n//           }\n//         }\n//       )\n//     }\n//   }\n//   strikeUnstrike(task) {\n//     task.completed = !task.completed\n//     var csrftoken = this.getCookie('csrftoken')\n//     var url = `http://127.0.0.1:8000/updateItem/${task.id}`\n//     fetch(url, {\n//       method: 'POST',\n//       headers: {\n//         'Content-type': 'application/json',\n//         'X-CSRFToken': csrftoken,\n//       },\n//       body: JSON.stringify({ 'completed': task.completed, 'title': task.title })\n//     }).then(() => {\n//       this.fetchTasks()\n//     })\n//     console.log('TASK:', task.completed)\n//   }\n//   render() {\n//     var tasks = this.state.todoList\n//     var self = this\n//     return (\n//       <>\n//         <nav className='navbar bg-dark text-white'>\n//           <h4><img src={logo} alt=\"react-logo\" className='r-logo' />REACT</h4>\n//         </nav>\n//         <div className='container'>\n//           <div className=\"row\">\n//             <div className=\"col-md-3\">\n//             </div>\n//             <div className=\"col-md-6\">\n//               <div className=\"task-container\">\n//                 <div className=\"form-wrapper\">\n//                   <h5>Todo App </h5>\n//                   <form onSubmit={this.formSubmit} className='mt-5'>\n//                     <div className=\"flex-wrapper\">\n//                       <input onChange={this.handleChange} id=\"title\" value={this.state.activeItem.title} className='form-control' name=\"title\" type=\"text\" />\n//                       <button className='btn btn-dark'>Submit</button>\n//                     </div>\n//                   </form>\n//                   {tasks.map(function (task, index) {\n//                     return (\n//                       <div>\n//                         <div key={index} className='task-wrapper flex-wrapper'>\n//                           <div key={index} onClick={() => self.strikeUnstrike(task)} >\n//                             {task.completed == false ? (\n//                               <span>{task.title}</span>\n//                             ) : (\n//                               <strike>{task.title}</strike>\n//                             )}\n//                           </div>\n//                           <button onClick={() => self.deleteItem(task)} className=\"close\">X</button>\n//                           <div>\n//                             <button onClick={() => self.startEdit(task)} className=\"btn btn-sm btn-outline-info ml-5\">Edit</button>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     )\n//                   })}\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </>\n//     )\n//   }\n// }\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/OZCAN/Desktop/frontend/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// import React, { Component } from 'react'\n\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       todoList: [],\n//       activeItem: {\n//         id: null,\n//         title: '',\n//         completed: false,\n//       },\n//       editing: false,\n//       deneme:\"\",\n//     };\n//     this.fetchTasks = this.fetchTasks.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//     this.formSubmit = this.formSubmit.bind(this);\n//     this.startEdit = this.startEdit.bind(this);\n//     this.getCookie = this.getCookie.bind(this);\n//     this.deleteItem = this.deleteItem.bind(this);\n\n//   };\n\n//   getCookie(name) {\n//     var cookieValue = null;\n//     if (document.cookie && document.cookie !== '') {\n//       var cookies = document.cookie.split(';');\n//       for (var i = 0; i < cookies.length; i++) {\n//         var cookie = cookies[i].trim();\n//         // Does this cookie string begin with the name we want?\n//         if (cookie.substring(0, name.length + 1) === (name + '=')) {\n//           cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n//           break;\n//         }\n//       }\n//     }\n//     return cookieValue;\n//   }\n//   componentDidMount() {\n//     this.fetchTasks()\n//   }\n\n\n//   //  setTimeout(this.fetchTasks, 5000); \n//   // myTimeout = setTimeout(this.fetchTasks, milliseconds);\n\n\n//   componentWillMount() {\n//     this.fetchTasks()\n//   }\n//   fetchTasks() {\n\n//     console.log(\"Fetching...\")\n//     fetch('http://127.0.0.1:8000/todolist')\n//       .then(response => response.json())\n//       .then(data =>\n//         //console.log(data)\n//         this.setState({\n//           todoList: data\n//         })\n\n\n//       )\n\n//   }\n\n\n\n//   formSubmit(e) {\n//     e.preventDefault()\n\n//     if (this.state.activeItem.title === '') {\n//       console.log(\"Bu alan boş bırakılamaz\")\n//       console.log(this.state.todoList)\n//     }\n//     else {\n\n//       console.log(\"Submit...\")\n//       let item_id = this.state.activeItem.id\n\n//       console.log(this.state.editing)\n//       var csrftoken = this.getCookie('csrftoken')\n\n//       var url = 'http://127.0.0.1:8000/createItem'\n\n//       if (this.state.editing === true) {\n//         url = `http://127.0.0.1:8000/updateItem/${this.state.activeItem.id}`\n\n//         this.setState({\n//           editing: false\n//         })\n//       }\n\n\n\n//       fetch(url, {\n//         method: 'POST',\n//         headers: {\n//           'Content-type': 'application/json',\n//           'X-CSRFToken': csrftoken,\n//         },\n//         body: JSON.stringify(this.state.activeItem)\n//       }).then((response) => {\n//         this.fetchTasks()\n//         this.setState({\n//           activeItem: {\n//             id: null,\n//             title: '',\n//             completed: false,\n//           }\n//         })\n//       }).catch(function (error) {\n//         console.log('ERROR:', error)\n//       })\n\n\n\n//     }\n\n//   }\n\n//   startEdit(task) {\n//     this.setState({\n//       deneme:task.title,\n//     })\n   \n//     // this.setState({\n//     //   activeItem:{\n//     //     ...task,\n//     //     editing:true\n//     //   }\n//     // })\n//     this.forceUpdate();\n//     //console.log(this.state.activeItem)\n//     console.log(this.state.deneme)\n\n//   }\n\n\n\n//   deleteItem(task) {\n//     console.log(task.id)\n\n//     var csrftoken = this.getCookie('csrftoken')\n//     console.log(csrftoken)\n\n//     fetch(`http://127.0.0.1:8000/deleteItem/${task.id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Content-type': 'application/json',\n//         'X-CSRFToken': csrftoken,\n//       },\n//       body: JSON.stringify(task.id)\n//     }).then((response) => {\n//       console.log(response)\n//       this.fetchTasks()\n//     })\n//   }\n\n\n\n\n\n//   handleChange(e) {\n\n//     var value = e.target.value\n//     if (value === '') {\n//       this.setState(\n//         {\n//           activeItem: {\n//             title: value\n//           }\n//         }\n//       )\n//       console.log(\"Bu alan boş bırakılamaz\")\n//     }\n//     else {\n//       console.log('Value:', value)\n//       this.setState(\n//         {\n//           activeItem: {\n//             title: value\n//           }\n//         }\n//       )\n//     }\n\n\n//   }\n\n//   strikeUnstrike(task) {\n\n//     task.completed = !task.completed\n//     var csrftoken = this.getCookie('csrftoken')\n//     var url = `http://127.0.0.1:8000/updateItem/${task.id}`\n\n//     fetch(url, {\n//       method: 'POST',\n//       headers: {\n//         'Content-type': 'application/json',\n//         'X-CSRFToken': csrftoken,\n//       },\n//       body: JSON.stringify({ 'completed': task.completed, 'title': task.title })\n//     }).then(() => {\n//       this.fetchTasks()\n//     })\n\n//     console.log('TASK:', task.completed)\n//   }\n\n\n\n//   render() {\n//     var tasks = this.state.todoList\n//     var self = this\n//     return (\n//       <>\n\n//         <nav className='navbar bg-dark text-white'>\n//           <h4><img src={logo} alt=\"react-logo\" className='r-logo' />REACT</h4>\n//         </nav>\n//         <div className='container'>\n//           <div className=\"row\">\n//             <div className=\"col-md-3\">\n//             </div>\n\n\n//             <div className=\"col-md-6\">\n//               <div className=\"task-container\">\n\n//                 <div className=\"form-wrapper\">\n//                   <h5>Todo App </h5>\n//                   <form onSubmit={this.formSubmit} className='mt-5'>\n//                     <div className=\"flex-wrapper\">\n\n//                       <input onChange={this.handleChange} id=\"title\" value={this.state.activeItem.title} className='form-control' name=\"title\" type=\"text\" />\n\n//                       <button className='btn btn-dark'>Submit</button>\n\n//                     </div>\n//                   </form>\n\n//                   {tasks.map(function (task, index) {\n\n//                     return (\n//                       <div>\n//                         <div key={index} className='task-wrapper flex-wrapper'>\n//                           <div key={index} onClick={() => self.strikeUnstrike(task)} >\n//                             {task.completed == false ? (\n//                               <span>{task.title}</span>\n\n//                             ) : (\n\n//                               <strike>{task.title}</strike>\n//                             )}\n//                           </div>\n//                           <button onClick={() => self.deleteItem(task)} className=\"close\">X</button>\n\n//                           <div>\n//                             <button onClick={() => self.startEdit(task)} className=\"btn btn-sm btn-outline-info ml-5\">Edit</button>\n//                           </div>\n\n//                         </div>\n//                       </div>\n//                     )\n//                   })}\n\n\n\n\n\n//                 </div>\n//               </div>\n//             </div>\n\n//           </div>\n//         </div>\n\n\n//       </>\n//     )\n//   }\n// }\n\n\n\n// export default App;\n"],"mappings":"AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA"},"metadata":{},"sourceType":"module"}